#!/bin/sh

# https://github.com/pystardust/ytfzf

# DEFAULTS
[ -z "$YTFZF_HIST" ] && YTFZF_HIST=1
[ -z "$YTFZF_LOOP" ] && YTFZF_LOOP=0
[ -z "$YTFZF_CUR" ] && YTFZF_CUR=1
[ -z "$YTFZF_CACHE" ] && YTFZF_CACHE=~/.cache/ytfzf
[ -z "$YTFZF_PREF" ] && YTFZF_PREF=""
[ -z "$YTFZF_EXTMENU" ] && YTFZF_EXTMENU='dmenu -i -l 30 -p Search:'
[ -z "$YTFZF_EXTMENU_LEN" ] && YTFZF_EXTMENU_LEN=220

## directories
history_file="$YTFZF_CACHE"/ytfzf_hst
current_file="$YTFZF_CACHE"/ytfzf_cur
thumb_dir="$YTFZF_CACHE"/thumb
[ -d $YTFZF_CACHE ] || mkdir -p $YTFZF_CACHE
[ -d $thumb_dir ] || mkdir -p $thumb_dir


## player settings
show_format="0"
player="mpv"
player_format="mpv --ytdl-format="

## misc
FZF_DEFAULT_OPTS=""

## For MacOS users
if [ "$(uname)" = "Darwin" ]; then
	alias sed='gsed'
fi



# DYNAMIC SIZE
## min length
format_ext_menu () {
	frac=$(((YTFZF_EXTMENU_LEN - 5 - 12)/11))
	title_len=$((frac * 6 - 1))
	channel_len=$((frac * 3/2))
	dur_len=$((frac * 1))
	view_len=$((frac * 1))
	date_len=$((frac * 3/2 ))
	url_len=12
}
format_fzf () {
	dur_len=7
	view_len=10
	date_len=14
	url_len=12

	t_size="$(stty size | cut -f2 -d' ')"
	[ $show_thumbnails -eq 1 ] && { t_size=200 ;}
	if [ $t_size -lt 75 ]; then
		# title channel
		frac=$(((t_size - 1)/4))
		title_len=$((frac * 3))
		channel_len=$((frac * 1 + 7))
	elif [ $t_size -lt 95 ]; then
		# title channel time
		frac=$(((t_size - 4)/8))
		title_len=$((frac * 5 - 1))
		channel_len=$((frac * 2 - 1))
		dur_len=$((frac * 1 + 10))
	elif [ $t_size -lt 110 ]; then
		# title channel time views
		frac=$(((t_size - 1)/9))
		title_len=$((frac * 5 ))
		channel_len=$((frac * 2 ))
		dur_len=$((frac * 1))
		view_len=$((frac * 1 + 7))
	else
		# title channel time views date
		frac=$(((t_size - 5)/11))
		title_len=$((frac * 5 - 1))
		channel_len=$((frac * 2))
		dur_len=$((frac * 1))
		view_len=$((frac * 1))
		date_len=$((frac * 2 + 20))
	fi
}
# HELPER TEXT
errinfo () {
printf "Check for new versions and report at: https://github.com/pystardust/ytfzf\n"
}
helpinfo () {
printf "Usage: %bytfzf %b<search query>%b\n" "\033[1;32m" "\033[1;33m" "\033[0m";
printf "     -h                    Show this help text\n";
printf "     -t                    Show thumbnails (requires ueberzug)\n";
printf "                           Doesn't work with -H -D\n";
printf "     -D                    Use external menu(default dmenu) instead of fzf \n";
printf "     -H                    Choose from history \n";
printf "     -x                    Delete history\n";
printf "     -m  <search query>    Audio only (for music)\n";
printf "     -d  <search query>    Download to current directory\n";
printf "     -f  <search query>    Show available formats before proceeding\n";
printf "     -a  <search query>    Auto play the first result, no selector\n";
printf "     -r  <search query>    Auto play a random result, no selector\n";
printf "     -l  <search query>    Loop: prompt selector again after video ends\n";
printf "     -L  <search query>    Prints the selected URL only, helpful for scripting\n";
printf "  Use - instead of <query> for stdin\n";
printf "\n"
printf "  Option can be combines. Like\n"
printf "     ytfzf -fDH            to show history using external \n"
printf "                           menu and show formats\n"
printf "\n"
printf "  Defaults can be modified through ENV variables\n";
printf "  Defaults:\n";
printf "     YTFZF_HIST=1                          0 : off history\n";
printf "     YTFZF_CACHE=~/.cache/ytfzf\n";
printf "     YTFZF_LOOP=0                          1 : loop the selection prompt\n";
printf "     YTFZF_PREF=''                         22: 720p,  18: 360p\n";
printf "     YTFZF_CUR=1                           For status bar bodules\n";
printf "     YTFZF_EXTMENU=' dmenu -i -l 30'\n";
printf "  To use rofi\n";
printf "     YTFZF_EXTMENU=' rofi -dmenu -fuzzy -width 1500'\n";
printf "\n";
printf "  For more details refer https://github.com/pystardust/ytfzf\n";
}
usageinfo () {
printf "Usage: %bytfzf %b<search query>%b\n" "\033[1;32m" "\033[1;33m" "\033[0m";
printf "     'ytfzf -h' for more information\n";
}
format_awk () {
	awk -F'\t' \
	-v A=$title_len -v B=$channel_len -v C=$dur_len -v D=$view_len -v E=$date_len -v F=$url_len \
	'{ printf "%-"A"."A"s\t%-"B"."B"s\t%-"C"."C"s\t%-"D"."D"s\t%-"E"."E"s\t%-"F"."F"s\n",$1,$2,$4,$3,$5,$6}'
}
video_menu () {
	format_awk | eval "$prompt_menu"
}
video_menu_img () {
	dep_ck "ueberzug"
	format_awk | fzf --tabstop=1 --bind change:top --delimiter="$(printf "\t")" --nth=1,2 \
		--layout=reverse --preview "sh $0 -U {}" \
        	--preview-window "left:50%:noborder:wrap"
}
save_before_exit () {
	[ $YTFZF_HIST -eq 1 ] && printf "%s\n" "$selected_data" >> "$history_file" ;
	[ $YTFZF_CUR -eq 1 ] && printf "" > "$current_file" ;
}
download_thumbnails () {
	thumb_urls="$(printf "%s" "$videos_json" |\
		jq  '.thumbnail.thumbnails[0].url,.videoId' )"

	if [ $show_link_only -eq 0 ]; then
		printf "Downloading Thumbnails.."
    fi
	rm -r $thumb_dir/* 1>/dev/null 2>&1
	i=0
	while read line; do
		[ $((i % 2)) -eq 0 ] && { url="$(echo $line | sed -E 's/^"//;s/\.png.*/\.png/')" ;}
		[ $((i % 2)) -eq 1 ] && {
			name="$(echo "$line" | tr -d '"')"
			{ 
              curl -s "$url" > "$thumb_dir/$name.png" && [ $show_link_only -eq 0 ] && printf "."; } &
		}
		i=$((i + 1))
	done << EOF
$thumb_urls
EOF
	wait && [ $show_link_only -eq 0 ] && echo ""

}

## The following snippet of code has been copied and modified from
## https://github.com/OliverLew/fontpreview-ueberzug      MIT License
# Ueberzug related variables
FIFO="/tmp/ytfzf-ueberzug-fifo"
IMAGE="/tmp/ytfzf-ueberzug-img.png"
ID="ytfzf-ueberzug"
WIDTH=$FZF_PREVIEW_COLUMNS
HEIGHT=$FZF_PREVIEW_LINES

start_ueberzug () {
    [ -e $FIFO ] || { mkfifo "$FIFO" || exit 1 ; }
    [ -e $IMAGE ] || { touch "$IMAGE" || exit 1 ; }
    ueberzug layer --parser json --silent < "$FIFO" &
    exec 3>"$FIFO"
}

stop_ueberzug () {
    exec 3>&-
    rm "$FIFO" "$IMAGE" > /dev/null 2>&1
}

preview_img () {
	shorturl="$(echo "$@" | sed -E -e 's_.*\|([^|]+) *$_\1_')"
	# In fzf the cols and lines are those of the preview pane
	IMAGE="$thumb_dir/$shorturl.png"
	{   printf '{ "action": "add", "identifier": "%s", "path": "%s",' "$ID" "$IMAGE"
	    printf '"x": %d, "y": %d, "scaler": "fit_contain",' 2 10
	    printf '"width": %d, "height": %d }\n' "$WIDTH" "$((HEIGHT - 2))"
	} > "$FIFO" 
	echo "$@" |  tr -d '|' | awk -F'\t' \
	'{ printf "%s\nChannel: %s\nViews: %s\nDuration: %s\nUploaded %s\n",$1,$2,$4,$3,$5}'
	#printf '{ "action": "remove", "identifier": "%s" }\n' "$ID" > "$FIFO"
}
### End snippet


# Opt variables
show_thumbnails=0
show_link_only=0
main=0
auto_select=0
random_select=0
is_ext_menu="0"
# DEP CHECK
dep_ck () {
	command -v "$1" 1>/dev/null || { printf "$1 not found. Please install it.\n" ; exit 2; }
}
dep_ck "jq"; dep_ck "youtube-dl"; dep_ck "mpv";

# OPT
while getopts "LhDmdfxHarltU:" opt; do
	case ${opt} in
		h) 	helpinfo
			exit;
			;;
		D) 	is_ext_menu="1"
			;;
		m) 	YTFZF_PREF="bestaudio"
			;;
		d) 	player="youtube-dl"
		   	player_format="youtube-dl -f "
			;;
		f) 	show_format="1"
			;;
		H)
			if [ $YTFZF_HIST -eq 1 ]; then
				[ -e "$history_file" ] || touch "$history_file"
				hist_data="$(tac "$history_file")"
				[ -z "$hist_data" ] && printf "History is empty!\n" && exit;
				videos_data="$(echo "$hist_data" | uniq )"
				main=1
			else
				printf "History is not enabled. Please enable it to use this option -H.\n";
				exit;
			fi
			;;
		x)
			[ -e "$history_file" ] && rm "$history_file" && touch "$history_file" && printf "History has been cleared\n"
			exit;
			;;
		a) 	auto_select=1
			;;
		r)
			random_select=1
			;;
		l) 	YTFZF_LOOP=1
			;;
		t) 	show_thumbnails=1
			;;
		L) 	show_link_only=1
			;;
		U) 	[ -p "$FIFO" ] && preview_img "$OPTARG"; exit;
			;;
		*)
			printf "Option not found!\n"
			usageinfo
			exit 2;
			;;
	esac
done
shift $((OPTIND-1))

# If in auto select mode don't download thumbnails
[ $auto_select -eq 1 ] || [ $random_select -eq 1 ]  && { show_thumbnails=0; }

# Formatting and settings for menu's
if [ $is_ext_menu -eq 0 ]; then
	dep_ck "fzf"
	prompt_menu='fzf  --bind change:top --tabstop=1 --layout=reverse --delimiter="$(printf "\t")" --nth=1,2'
	[ ! "$*" = "-" ] && format_fzf || format_ext_menu
else
	# dmenu doesnt render tabs so removing it
	prompt_menu='tr -d "$(printf "\t")" | '"$YTFZF_EXTMENU"
	format_ext_menu
fi

# MAIN
## Scrape data and store video information ( and thumbnails download)
[ $main -eq 0 ] && {

	if [ "$*" = "-" ]; then
		while read line; do
			search_query="$search_query $line"
		done
	else
		search_query="$*"
		[ $is_ext_menu -eq 1 ] && [ -z "$search_query" ] && search_query="$(printf "" | $YTFZF_EXTMENU)"
		[ -z "$search_query" ] && { usageinfo ; exit 0; }
	fi


	## GETTING DATA
	yt_html="$(
	useragent='user-agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.152 Safari/537.36'

	curl 'https://www.youtube.com/results' -s \
	  -G --data-urlencode "search_query=$search_query" \
	  -H 'authority: www.youtube.com' \
	  -H "$useragent" \
	  -H 'accept-language: en-US,en;q=0.9' \
	  --compressed
	)"
	[ -z "$yt_html" ] &&  {
		printf "ERROR[#01]: Couldn't curl website. Please check your network and try again.\n";
		errinfo; exit 2; }

	yt_json="$(printf "%s" "$yt_html" | sed -n '/var *ytInitialData/,$p' | tr -d '\n' |\
		sed -E ':a s_^.*var ytInitialData ?=__ ; s_;</script>.*__ ;'
	 )"
	[ -z "$yt_json" ] &&  {
		printf "ERROR[#02]: Couldn't find data on site.\n";
		errinfo ; exit 2; }

	videos_json="$(printf "%s" "$yt_json" | jq '..|.videoRenderer?' | sed '/^null$/d')"
	videos_data="$( printf "%s" "$videos_json" |\
		jq  '.title.runs[0].text,.longBylineText.runs[0].text,.shortViewCountText.simpleText,.lengthText.simpleText,.publishedTimeText.simpleText,.videoId' |\
		sed 's/^"//;s/"$//;s/\\"//g' | sed -E -n ";N;N;N;N;N;s/\n/\t\|/g;p"
		)"
	[ -z "$videos_data" ] &&  { printf "No results found. Try different keywords.\n"; errinfo ; exit 1;}

	[ $show_thumbnails -eq 1 ] && download_thumbnails
} #MAIN END

## USER SELECTION
user_selection () {
	if [ $auto_select -eq 1 ] ; then
		selected_data="$(echo "$videos_data" | sed 1q )" ;
	elif [ $random_select -eq 1 ] ; then
		selected_data="$(echo "$videos_data" | shuf -n 1)"
	elif [ $show_thumbnails -eq 1 ] ; then
		start_ueberzug
		selected_data="$(echo "$videos_data" | video_menu_img )"
		stop_ueberzug 
	else
		selected_data="$(echo "$videos_data" | video_menu )"
	fi

	shorturl="$(echo "$selected_data" | sed -E -e 's_.*\|([^|]+) *$_\1_')"
	[ -z "$shorturl" ] && exit;
	url="https://www.youtube.com/watch?v=$shorturl"
	# to get back untruncated data
	selected_data="$(echo "$videos_data" | grep -m1 -e "$shorturl" )"

    if [ $show_link_only ] ; then
      echo $url
      exit
    fi

	# selecte format if flag given
	[ $show_format -eq 1 ] && {
		YTFZF_PREF="$(youtube-dl -F "$url" | sed '1,3d' | tac - |\
		eval "$prompt_menu" | sed -E 's/^([^ ]*) .*/\1/')"
		[ -z $YTFZF_PREF  ] && exit;
	}
}
play_url () {

	[ $YTFZF_CUR -eq 1 ] && printf "$selected_data" > "$current_file" ;

	[ -n "$YTFZF_PREF" ] && {
		eval "$player_format"\'$YTFZF_PREF\'  "$url"
	} || {
		[ 4 -eq $? ] || eval "$player" "$url" # Ctr-C in MPV results in a return code of 4
	} || {
		printf "ERROR[#03]: Couldn't play the video/audio using the current player.\n\tTry updating youtube-dl\n"; errinfo ; save_before_exit ; exit 2;
	}
}

while true; do
	user_selection
	play_url
	save_before_exit
	[ $YTFZF_LOOP -eq 0 ] && exit;
done
